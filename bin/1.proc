#!/usr/bin/env stack
{- stack script
    --resolver lts-17.10
    --package raw-strings-qq
    --package foldl
    --package mtl
    --package text
    --package pretty-show
    --package lens
    --package lens-regex-pcre
    --package turtle
-}

{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE BlockArguments #-}
{-# LANGUAGE LambdaCase #-}

import Prelude hiding (tail, head)
import qualified Data.List as L
import Data.Functor
import Control.Monad.State.Lazy
import Control.Lens
import Control.Lens.Regex.Text
import qualified Control.Foldl as Fl
import qualified Data.Text as T
import qualified Data.Text.IO as T

import Text.Show.Pretty

import Turtle hiding ((<&>), match, view)
import qualified Turtle as Sh
import qualified Turtle.Pattern as ShP

-- tail n shl =
--     reduce Fl.list shl >>= select . drop n

data VimMode = NormalMode | InsertMode | TermMode

bannerLength = 17

main = Sh.sh $ do
    -- Remove Banner (no longer needed)
    -- nobanner <- drop bannerLength <$> reduce Fl.list stdin

    -- Remove newlines
    oneline <- lineToText . mconcat <$> reduce Fl.list stdin

    -- liftIO $ pPrint $ filter (not . T.null) $ view ([regex|(.*?)(<.+?>)|] . groups) $ oneline
    liftIO $ T.putStrLn $ oneline
        -- Detect and remove terminal mode
        -- TODO: Find a way to concatenate quasiquotation
        -- TODO: List all insert mode changing commands
        & [regex|<cps>.*?(gt.*?gt).*?[aAiIoO]|] . group 0 .~ T.empty

        -- Remove direct mention to modifier keys
        -- -- TODO: Check for others
        & [regex|<lsh>|<lsu>|<lcl>|<lal>|<ral>|] . match .~ T.empty

        -- Remove shift modifiers (they are most of the time included in the keysym)
        & [regex|<[as]([-+])([<>]|[^<>]*?)>|] . match .@~ (\[specialChar, charCode] ->
            if specialChar == "+"
               then T.concat ["<", charCode, ">"]
               else charCode)

        -- Add buffer control seq.s and turn caps lock to esc
        -- TODO: Add `cc` to list
        & [regex|<cps>(.*?[iIaAoOC])|] . match .@~ (("<esc>"<>) . (<>"<wbf>") . L.head)

        -- Escape `<` and `>`
        -- & [regex|(?:<esc>|<tab>|<wbf>|<cr>|<bs>|<[csam]-.*?>)(.*?([><]).*?)*?(?:<esc>|<tab>|<wbf>|<cr>|<bs>|<[csam]-.*?>)|] . group 1 %~
        --     \case
        --         "<" -> "<lt>"
        --         ">" -> "<gt>"
        --         _ -> undefined
