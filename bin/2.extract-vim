#!/usr/bin/env stack
{- stack script
    --resolver lts-17.10
    --package raw-strings-qq
    --package foldl
    --package mtl
    --package text
    --package pretty-show
    --package lens
    --package lens-regex-pcre
    --package turtle
-}

{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE BlockArguments #-}
{-# LANGUAGE LambdaCase #-}

import Prelude hiding (tail, head)
import qualified Data.List as L
import Data.Functor
import Control.Monad.State.Lazy
import Control.Lens
import Control.Lens.Regex.Text
import qualified Control.Foldl as Fl
import qualified Data.Text as T
import qualified Data.Text.IO as T

import Text.Show.Pretty

import Turtle hiding ((<&>), match, view)
import qualified Turtle as Sh
import qualified Turtle.Pattern as ShP

main = Sh.sh $ do
    -- Remove newlines
    oneline <- lineToText . mconcat <$> reduce Fl.list stdin
    
    liftIO $ mapM T.putStrLn $ oneline
        -- Extract vim sequences
        ^.. [regex|<esc><bfi>.*?[iIaAoOC]<bfq>|] . match

-----------
-- Tests --
-----------

-- term: ./bin/3.intersperse-vim -v <(cat ./recs/12.kb.vim.haskell.aoc.qute.txt | ./bin/1.proc-rec | ./bin/2.extract-vim) -c <(seq 100 | sed 's/.*/X/g' | tr -d '\n')
